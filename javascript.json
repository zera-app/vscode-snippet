{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// * FUNCTION ============================================================================================================
	"constant Function": {
		"prefix": "confunc",
		"body": [
			"const ${1:functionName} = (${2:parameters}) => {",
			"\t// body $3",
			"};"
		],
		"description": "Create const function"
	},
	"anonymous basic Function": {
		"prefix": "anobasfunc",
		"body": ["function (${2:parameters}) {", "\t// body $3", "}"],
		"description": "Create const function"
	},
	"anonymous arrow Function": {
		"prefix": "anoarrfunc",
		"body": ["(${2:parameters}) => {", "\t// body $3", "}"],
		"description": "Create const function"
	},

	// * END FUNCTION ============================================================================================================

	// * ARRAY FUNCTION ============================================================================================================
	"Map arrow function": {
		"prefix": ["mapdata", "map"],
		"description": "Map function",
		"body": ["map(($data, $index) => {", "\tlet $data;", "});"]
	},
	"Reduce arrow function": {
		"prefix": ["reducedata", "reduce"],
		"description": "Reducer function",
		"body": [
			"reduce(($1total, $2data) => {",
			"\treturn $1total += $2data;",
			"}, $3startfrom);"
		]
	},
	"Filter arrow function": {
		"prefix": ["filterdata", "filter"],
		"description": "Filter array",
		"body": [
			"filter(($1element, $2index) => {",
			"\t // your filter $3",
			"}, $3callBack);"
		]
	},
	// * / END ARRAY FUNCTION ======================================================================================================
	// *  CONSOLE SNIPPERS  ======================================================================================================
	"console.log()": {
		"prefix": ["log"],
		"description": "console log",
		"body": [
			"console.log('==============================');",
			"console.log(${1});",
			"console.log('==============================');"
		]
	},
	"console.info()": {
		"prefix": ["info"],
		"description": "console info",
		"body": [
			"console.log('==============================');",
			"console.info(${1});",
			"console.log('==============================');"
		]
	},
	"console.table()": {
		"prefix": ["table"],
		"description": "console table",
		"body": [
			"console.log('==============================');",
			"console.table(${1});",
			"console.log('==============================');"
		]
	},
	"console.warn()": {
		"prefix": ["warn"],
		"description": "console warn",
		"body": [
			"console.log('==============================');",
			"console.warn(${1});",
			"console.log('==============================');"
		]
	},
	"console.count()": {
		"prefix": ["count"],
		"description": "console count",
		"body": [
			"console.log('==============================');",
			"console.count(${1});",
			"console.log('==============================');"
		]
	},
	"console.assert()": {
		"prefix": ["assert"],
		"description": "console assert",
		"body": [
			"console.log('==============================');",
			"console.assert(${1});",
			"console.log('==============================');"
		]
	},
	"console.time()": {
		"prefix": ["time"],
		"description": "console time",
		"body": [
			"console.log('==============================');",
			"console.time(${1});",
			"console.log('==============================');"
		]
	},
	"console.timeLog()": {
		"prefix": ["timeLog"],
		"description": "console timeLog",
		"body": [
			"console.log('==============================');",
			"console.timeLog(${1});",
			"console.log('==============================');"
		]
	},
	"console.trace()": {
		"prefix": ["trace"],
		"description": "console trace",
		"body": [
			"console.log('==============================');",
			"console.trace(${1});",
			"console.log('==============================');"
		]
	},
	"console.group()": {
		"prefix": ["group"],
		"description": "console group",
		"body": [
			"console.log('==============================');",
			"console.group(${1});",
			"console.log('==============================');"
		]
	},
	"console.groupCollapsed()": {
		"prefix": ["groupCollapsed"],
		"description": "console groupCollapsed",
		"body": [
			"console.log('==============================');",
			"console.groupCollapsed(${1});",
			"console.log('==============================');"
		]
	},
	"console.groupEnd()": {
		"prefix": ["groupEnd"],
		"description": "console groupEnd",
		"body": [
			"console.log('==============================');",
			"console.groupEnd(${1});",
			"console.log('==============================');"
		]
	}
	// * / CONSOLE SNIPPERS  ======================================================================================================
}
